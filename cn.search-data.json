{"/blog/win_packages/":{"data":{"":"Windows 上的命令行包管理器种类繁多，各自针对不同的开发需求和应用场景：\nChocolatey 和 winget 适合常规软件管理。 Scoop 更适合开发工具和小型应用。 Conda、NPM 和 Yarn 主要服务于编程和开发环境，特别是 Python 和 JavaScript 生态。 MSYS2 和 Vcpkg 更适合 C/C++ 开发者。 NuGet 适用于 .NET 开发。 ","scoop#Scoop":"安装 使用命令 # 安装软件 scoop install git # 更新软件 scoop update # 卸载软件 scoop uninstall git ","winget#winget":"安装 # 使用 scoop 安装 winget scoop install winget 使用命令 # 安装软件 winget install \u003c软件名称\u003e # 显示可升级软件 winget upgrade 常用软件安装 # python winget install Python.Python.3.12 # Mozilla Firefox (x64 en-US) winget install Mozilla.Firefox # PotPlayer-64 bit winget install Daum.PotPlayer # VLC media player winget install VideoLAN.VLC # XMind winget install Xmind.Xmind # Node.js winget install OpenJS.NodeJS.LTS # Eclipse Temurin JDK with Hotspot 8u332-b09 (x64) winget install EclipseAdoptium.Temurin.8.JDK # Go Programming Language amd64 go1.24.2 winget install GoLang.Go # Microsoft Edge winget install Microsoft.Edge # Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.31.31103 winget install Microsoft.VCRedist.2015+.x64 # Microsoft Visual C++ 2013 Redistributable (x86) - 12.0.40660 winget install Microsoft.VCRedist.2013.x86 # Microsoft Visual C++ 2015-2019 Redistributable (x86) - 14.29.30139 winget install Microsoft.VCRedist.2015+.x86 # Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.40660 winget install Microsoft.VCRedist.2013.x64 # 钉钉 winget install Alibaba.DingTalk # Cherry Studio winget install kangfenmao.CherryStudio # Another Redis Desktop Manager 1.5.2 winget install qishibo.AnotherRedisDesktopManager # balenaEtcher 1.18.11 winget install Balena.Etcher # DeepL winget install DeepL.DeepL # Edit winget install Microsoft.Edit 参考链接： https://www.cnblogs.com/suv789/p/18831144"},"title":"windows 包管理器"},"/hextra-docs/":{"data":{"":"👋 你好！欢迎来到 Hextra 文档！","下一步#下一步":"立即深入以下部分，开始使用：\n入门指南学习如何使用 Hextra 创建网站 ","什么是-hextra#什么是 Hextra？":"Hextra 是一个现代、快速且功能齐全的 [Hugo][hugo] 主题，基于 [Tailwind CSS][tailwind-css] 构建。专为构建美观的文档、博客和网站而设计，它提供了开箱即用的功能和灵活性，以满足各种需求。","有问题或反馈#有问题或反馈？":" ❓ Hextra 仍在积极开发中。 有问题或反馈？欢迎提交问题！ ","特性#特性":" 精美设计 - 灵感源自 Nextra，Hextra 利用 Tailwind CSS 提供现代设计，使您的网站脱颖而出。 响应式布局与暗黑模式 - 在所有设备上都能完美呈现，从手机、平板到桌面。暗黑模式也得到支持，以适应不同的光照条件。 快速且轻量 - 由 Hugo 驱动，这是一个闪电般快速的静态网站生成器，仅需一个二进制文件，Hextra 保持其占用空间最小。无需 JavaScript 或 Node.js 即可使用。 全文搜索 - 内置离线全文搜索，由 FlexSearch 提供支持，无需额外配置。 功能齐全 - Markdown、语法高亮、LaTeX 数学公式、图表和 Shortcodes 元素，丰富您的内容。目录、面包屑导航、分页、侧边栏导航等均自动生成。 多语言与 SEO 就绪 - 通过 Hugo 的多语言模式轻松创建多语言网站。开箱即用支持 SEO 标签、Open Graph 和 Twitter Cards。 "},"title":"文档"},"/hextra-docs/advanced/":{"data":{"":"本节涵盖了一些主题的高级内容。\n多语言 自定义 评论系统 "},"title":"高级"},"/hextra-docs/advanced/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/hextra-docs/advanced/customization/":{"data":{"":"Hextra 在 hugo.yaml 配置文件中提供了一些默认的自定义选项，用于配置主题。 本页描述了可用的选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 会自动加载此文件。\n字体 内容的字体可以通过以下方式自定义：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 内联代码元素 与 其他文本 混合的文本颜色可以通过以下方式自定义：\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } 主色调 主题的主色调可以通过设置 --primary-hue、--primary-saturation 和 --primary-lightness 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; --primary-lightness: 50%; } 进一步的主题自定义 可以通过覆盖暴露的 CSS 类来进一步自定义主题。以下是一个自定义页脚元素的示例：\nassets/css/custom.css.hextra-footer { /* 样式将应用于页脚元素 */ } .hextra-footer:is(html[class~=\"dark\"] *) { /* 样式将应用于暗模式下的页脚元素 */ } 以下类可用于自定义主题的各个部分。\n通用 hextra-scrollbar - 滚动条元素 content - 页面内容容器 短代码 徽章 hextra-badge - 徽章元素 卡片 hextra-card - 卡片元素 hextra-card-image - 卡片图片元素 hextra-card-icon - 卡片图标元素 hextra-card-subtitle - 卡片副标题元素 卡片组 hextra-cards - 卡片网格容器 Jupyter Notebook hextra-jupyter-code-cell - Jupyter 代码单元容器 hextra-jupyter-code-cell-outputs-container - Jupyter 代码单元输出容器 hextra-jupyter-code-cell-outputs - Jupyter 代码单元输出 div 元素 PDF hextra-pdf - PDF 容器元素 步骤 steps - 步骤容器 标签页 hextra-tabs-panel - 标签页面板容器 hextra-tabs-toggle - 标签页切换按钮 文件树 hextra-filetree - 文件树容器 文件夹 hextra-filetree-folder - 文件树文件夹容器 导航栏 nav-container - 导航栏容器 nav-container-blur - 导航栏模糊元素 hamburger-menu - 汉堡菜单按钮 页脚 hextra-footer - 页脚元素 hextra-custom-footer - 自定义页脚部分容器 搜索 search-wrapper - 搜索包装容器 search-input - 搜索输入元素 search-results - 搜索结果列表容器 目录 hextra-toc - 目录容器 侧边栏 mobile-menu-overlay - 移动菜单的覆盖元素 sidebar-container - 侧边栏容器 sidebar-active-item - 侧边栏中的活动项 语言切换器 language-switcher - 语言切换按钮 language-options - 语言选项容器 主题切换 theme-toggle - 主题切换按钮 代码复制按钮 hextra-code-copy-btn-container - 代码复制按钮容器 hextra-code-copy-btn - 代码复制按钮 代码块 hextra-code-block - 代码块容器 功能卡片 hextra-feature-card - 功能卡片链接元素 功能网格 hextra-feature-grid - 功能网格容器 面包屑导航 面包屑导航没有特定的类。\n语法高亮 可用的语法高亮主题列表可在 Chroma 样式库 中找到。可以使用以下命令生成样式表：\nhugo gen chromastyles --style=github 要覆盖默认的语法高亮主题，可以将生成的样式添加到自定义 CSS 文件中。","自定义布局#自定义布局":"可以通过在站点的 layouts 目录中创建同名文件来覆盖主题的布局。 例如，要覆盖文档的 single.html 布局，可以在站点中创建文件 layouts/docs/single.html。\n更多信息，请参阅 [Hugo 模板文档][hugo-template-docs]。","自定义脚本#自定义脚本":"你可以通过添加以下文件在每个页面的 head 末尾添加自定义脚本：\nlayouts/partials/custom/head-end.html ","自定义页脚额外部分#自定义页脚额外部分":"你可以通过在站点中创建文件 layouts/partials/custom/footer.html 来在页脚中添加额外部分。\nlayouts/partials/custom/footer.html\u003c!-- 你的页脚元素在这里 --\u003e 添加的部分将出现在页脚的版权部分之前。 你可以使用 HTML 和 Hugo 模板语法 来添加自己的内容。\n页脚部分可用的 Hugo 变量有：.switchesVisible 和 .copyrightVisible。","进一步自定义#进一步自定义":"没有找到你想要的？欢迎 发起讨论 或为主题做出贡献！"},"title":"自定义"},"/hextra-docs/advanced/multi-language/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式创建多语言网站。","了解更多#了解更多":" Hugo 多语言模式 Hugo 多语言第一部分：内容翻译 Hugo 多语言第二部分：字符串本地化 ","启用多语言#启用多语言":"要使我们的网站支持多语言，我们需要告诉 Hugo 支持的语言。我们需要在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite 主题中使用的字符串列表可以在 i18n/en.yaml 文件中找到。","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 并在相应的 i18n 文件中进行翻译：\ni18n/fr.yamldocumentation: Documentation blog: Blog ","通过文件名管理翻译#通过文件名管理翻译":"Hugo 支持通过文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个文件 content/docs/_index.fr.md 作为法语翻译。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持通过内容目录进行翻译。"},"title":"多语言支持"},"/hextra-docs/getting-started/":{"data":{"":"","下一步#下一步":"探索以下部分以开始添加更多内容：\n组织文件 配置 Markdown ","从模板快速开始#从模板快速开始":" imfing/hextra-starter-template\n您可以通过使用上述模板仓库快速入门。\n我们提供了一个 GitHub Actions 工作流，可以帮助自动构建并将您的站点部署到 GitHub Pages，并免费托管。 更多选项，请查看 部署站点。\n🌐 演示 ↗","作为新项目开始#作为新项目开始":"有两种主要方式将 Hextra 主题添加到您的 Hugo 项目中：\nHugo 模块（推荐）：最简单且推荐的方法。Hugo 模块允许您直接从在线源拉取主题。主题会自动下载并由 Hugo 管理。\nGit 子模块：或者，将 Hextra 添加为 Git 子模块。主题由 Git 下载并存储在您项目的 themes 文件夹中。\n将 Hextra 设置为 Hugo 模块 先决条件 在开始之前，您需要安装以下软件：\nHugo（扩展版） Git Go 步骤 初始化一个新的 Hugo 站点 hugo new site my-site --format=yaml 通过模块配置 Hextra 主题 # 初始化 Hugo 模块 cd my-site hugo mod init github.com/username/my-site # 添加 Hextra 主题 hugo mod get github.com/imfing/hextra 配置 hugo.yaml 以使用 Hextra 主题，添加以下内容：\nmodule: imports: - path: github.com/imfing/hextra 创建您的内容页面 为主页和文档页面创建新的内容页面：\nhugo new content/_index.md hugo new content/docs/_index.md 本地预览站点 hugo server --buildDrafts --disableFastRender 恭喜，您的新站点预览可在 http://localhost:1313/ 查看。\n如何更新主题？ 要更新项目中所有 Hugo 模块到最新版本，请运行以下命令：\nhugo mod get -u 要将 Hextra 更新到 最新发布版本，请运行以下命令：\nhugo mod get -u github.com/imfing/hextra 有关更多详细信息，请参阅 Hugo 模块。\n将 Hextra 设置为 Git 子模块 先决条件 在开始之前，您需要安装以下软件：\nHugo（扩展版） Git 步骤 初始化一个新的 Hugo 站点 hugo new site my-site --format=yaml 将 Hextra 主题添加为 Git 子模块 git submodule add https://github.com/imfing/hextra.git themes/hextra 配置 hugo.yaml 以使用 Hextra 主题，添加以下内容：\ntheme: hextra 创建您的内容页面 为主页和文档页面创建新的内容页面：\nhugo new content/_index.md hugo new content/docs/_index.md 本地预览站点 hugo server --buildDrafts --disableFastRender 您的新站点预览可在 http://localhost:1313/ 查看。\n当使用 CI/CD 部署 Hugo 网站时，确保在运行 hugo 命令之前执行以下命令至关重要。\ngit submodule update --init 如果不运行此命令，主题文件夹将不会被 Hextra 主题文件填充，导致构建失败。\n如何更新主题？ 要更新仓库中所有子模块到最新提交，请运行以下命令：\ngit submodule update --remote 要将 Hextra 更新到最新提交，请运行以下命令：\ngit submodule update --remote themes/hextra 有关更多详细信息，请参阅 Git 子模块。"},"title":"入门指南"},"/hextra-docs/guide/":{"data":{"":"探索以下部分，了解如何使用 Hextra：\n文件组织 配置 Markdown 语法高亮 LaTeX 图表 短代码 部署站点 "},"title":"指南"},"/hextra-docs/guide/configuration/":{"data":{"":"Hugo 从您 Hugo 站点根目录下的 hugo.yaml 文件中读取配置。 配置文件是您可以配置站点所有方面的地方。 查看此站点的配置文件 exampleSite/hugo.yaml 在 GitHub 上，以全面了解可用的设置和最佳实践。","侧边栏#侧边栏":"主侧边栏 主侧边栏是根据内容目录的结构自动生成的。 有关更多详细信息，请参阅 组织文件 页面。\n要从左侧边栏中排除单个页面，请在页面的 front matter 中设置 sidebar.exclude 参数：\ncontent/docs/guide/configuration.md--- title: 配置 sidebar: exclude: true --- 额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中定义：\nhugo.yamlmenu: sidebar: - name: 更多 params: type: separator weight: 1 - name: \"关于\" pageRef: \"/about\" weight: 2 - name: \"Hugo 文档 ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","其他#其他":"网站图标 要为您的站点自定义 网站图标，请将图标文件放在 static 文件夹下，以覆盖 主题的默认网站图标：\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest 在您的项目中包含 favicon.ico、favicon.svg 和 favicon-dark.svg 文件，以确保您的站点图标正确显示。\n虽然 favicon.ico 通常用于旧版浏览器，但 favicon.svg 和 favicon-dark.svg 受现代浏览器支持。 使用 favicon.io 或 favycon 等工具生成此类图标。\n主题配置 使用 theme 设置来配置默认主题模式和切换按钮，允许访问者在浅色或深色模式之间切换。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true theme.default 的选项：\nlight - 始终使用浅色模式 dark - 始终使用深色模式 system - 与操作系统设置同步（默认） theme.displayToggle 参数允许您显示一个切换按钮以更改主题。 当设置为 true 时，访问者可以在浅色或深色模式之间切换，覆盖默认设置。\n页面宽度 页面的宽度可以通过配置文件中的 params.page.width 参数进行自定义：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide 有三个可用选项：full、wide 和 normal。默认情况下，页面宽度设置为 normal。\n同样，导航栏和页脚的宽度可以通过 params.navbar.width 和 params.footer.width 参数进行自定义。\n搜索索引 默认启用由 FlexSearch 提供的全文搜索。 要自定义搜索索引，请在配置文件中设置 params.search.flexsearch.index 参数：\nhugo.yamlparams: # 搜索 search: enable: true type: flexsearch flexsearch: # 按以下内容索引页面：content | summary | heading | title index: content flexsearch.index 的选项：\ncontent - 页面的完整内容（默认） summary - 页面的摘要，请参阅 Hugo 内容摘要 了解更多详细信息 heading - 一级和二级标题 title - 仅包括页面标题 要自定义搜索分词，请在配置文件中设置 params.search.flexsearch.tokenize 参数：\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward flexsearch.tokenize 的选项：\nstrict - 索引整个单词 forward - 向前方向逐步索引单词 reverse - 双向逐步索引单词 full - 索引所有可能的组合 要从搜索索引中排除页面，请在页面的 front matter 中设置 excludeSearch: true：\ncontent/docs/guide/configuration.md--- title: 配置 excludeSearch: true --- Google Analytics 要启用 Google Analytics，请在 hugo.yaml 中设置 services.googleAnalytics.ID 标志：\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的。可以通过在页面的 front matter 中设置 toc: false 来禁用它。\ncontent/docs/guide/configuration.md--- title: 配置 toc: false --- 页面编辑链接 要配置页面编辑链接，我们可以在配置文件中设置 params.editURL.base 参数：\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" 编辑链接将根据提供的 URL 作为根目录自动为每个页面生成。 如果要为特定页面设置编辑链接，可以在页面的 front matter 中设置 editURL 参数：\ncontent/docs/guide/configuration.md--- title: 配置 editURL: \"https://example.com/edit/this/page\" --- ","导航#导航":"菜单 右上角的菜单在配置文件的 menu.main 部分中定义：\nhugo.yamlmenu: main: - name: 文档 pageRef: /docs weight: 1 - name: 博客 pageRef: /blog weight: 2 - name: 关于 pageRef: /about weight: 3 - name: 搜索 weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有不同类型的菜单项：\n使用 pageRef 链接到站点内的页面 - name: 文档 pageRef: /docs 使用 url 链接到外部 URL - name: GitHub url: \"https://github.com\" 使用 type: search 的搜索栏 - name: 搜索 params: type: search 图标 - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 参数进行排序。\n徽标和标题 要修改默认徽标，编辑 hugo.yaml 并在 static 目录下添加徽标文件的路径。 您还可以更改用户点击徽标时重定向的链接，以及设置徽标的宽度和高度（以像素为单位）。\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","页脚#页脚":"版权 要修改网站页脚中显示的版权文本，您需要创建一个名为 i18n/en.yaml 的文件。 在此文件中，指定您的新版权文本，如下所示：\ni18n/en.yamlcopyright: \"© 2024 您的文本\" 作为参考，可以在 GitHub 仓库中找到示例 i18n/en.yaml 文件。此外，您可以在版权文本中使用 Markdown 格式。"},"title":"配置"},"/hextra-docs/guide/deploy-site/":{"data":{"":"Hugo 生成静态网站，允许灵活的托管选项。 本页提供了在各种平台上部署 Hextra 站点的指南。","cloudflare-pages#Cloudflare Pages":" 将您的站点源代码放入 Git 仓库（例如 GitHub） 登录 Cloudflare 仪表板 并选择您的账户 在账户主页中，选择 Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git 选择仓库，并在 Set up builds and deployments 部分提供以下信息： 配置项 值 生产分支 main 构建命令 hugo --gc --minify 构建目录 public 更多详情，请查看：\n部署 Hugo 站点。 语言支持和工具。 ","github-pages#GitHub Pages":"GitHub Pages 是推荐的方式，可以免费部署和托管您的网站。\n如果您使用 hextra-starter-template 引导站点，它已经提供了开箱即用的 GitHub Actions 工作流，帮助自动部署到 GitHub Pages。\nGitHub Actions 配置 以下是 hextra-starter-template 的示例配置：\n.github/workflows/pages.yaml# 用于构建和部署 Hugo 站点到 GitHub Pages 的示例工作流 name: 部署 Hugo 站点到 Pages on: # 在推送到默认分支时运行 push: branches: [\"main\"] # 允许您从 Actions 选项卡手动运行此工作流 workflow_dispatch: # 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages permissions: contents: read pages: write id-token: write # 只允许一个并发部署，跳过在运行中和最新排队之间的运行。 # 但是，不要取消正在运行的运行，因为我们希望这些生产部署能够完成。 concurrency: group: \"pages\" cancel-in-progress: false # 默认使用 bash defaults: run: shell: bash jobs: # 构建任务 build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: 检出 uses: actions/checkout@v4 with: fetch-depth: 0 # 获取所有历史记录以支持 .GitInfo 和 .Lastmod submodules: recursive - name: 设置 Go uses: actions/setup-go@v5 with: go-version: '1.22' - name: 设置 Pages id: pages uses: actions/configure-pages@v4 - name: 设置 Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: 使用 Hugo 构建 env: # 为了最大程度地兼容 Hugo 模块 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: 上传工件 uses: actions/upload-pages-artifact@v3 with: path: ./public # 部署任务 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: 部署到 GitHub Pages id: deployment uses: actions/deploy-pages@v4 在您的仓库设置中，将 Pages \u003e Build and deployment \u003e Source 设置为 GitHub Actions： 默认情况下，上述 GitHub Actions 工作流 .github/workflows/pages.yaml 假设站点部署到 https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/。\n如果您部署到 https://\u003cUSERNAME\u003e.github.io/，请修改 --baseURL：\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" 如果您部署到自己的域名，请相应地更改 --baseURL 值。","netlify#Netlify":" 将代码推送到您的 Git 仓库（GitHub、GitLab 等） 导入项目 到 Netlify 如果您没有使用 [hextra-starter-template][hextra-starter-template]，请手动配置以下内容： 将构建命令配置为 hugo --gc --minify 指定发布目录为 public 添加环境变量 HUGO_VERSION 并设置为 0.145.0，或者将其设置在 netlify.toml 文件中 部署！ 查看 Netlify 上的 Hugo 了解更多详情。","vercel#Vercel":" 将代码推送到您的 Git 仓库（GitHub、GitLab 等） 前往 Vercel 仪表板 并导入您的 Hugo 项目 配置项目，选择 Hugo 作为框架预设 覆盖构建命令和安装命令： 将构建命令设置为 hugo --gc --minify 将安装命令设置为 yum install golang "},"title":"部署站点"},"/hextra-docs/guide/diagrams/":{"data":{"":"目前，Hextra 支持使用 Mermaid 来绘制图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表工具，它通过类似 Markdown 的文本定义，在浏览器中动态生成图表。例如，Mermaid 可以渲染流程图、序列图、饼图等。\n在 Hextra 中使用 Mermaid 非常简单，只需编写一个语言设置为 mermaid 的代码块：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将会渲染为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; 序列图示例：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: 你好 John，最近怎么样？ loop 健康检查 John-\u003e\u003eJohn: 与疑病症作斗争 end Note right of John: 理性思考 \u003cbr/\u003e占据上风！ John--\u003e\u003eAlice: 很好！ John-\u003e\u003eBob: 你怎么样？ Bob--\u003e\u003eJohn: 非常好！ 更多信息，请参考 Mermaid 文档。"},"title":"图表"},"/hextra-docs/guide/latex/":{"data":{"":"(\\KaTeX) 用于渲染 LaTeX 数学表达式。可以通过在页面前置设置中将 math 设置为 true 来启用它。\npage.md--- title: \"我的页面包含 LaTeX\" math: true --- 启用后，KaTeX 的脚本、样式表和字体将自动包含在您的站点中。您可以在 Markdown 内容中开始使用 LaTeX 数学表达式。","化学#化学":"通过 mhchem 扩展支持化学表达式。\n内联：(\\ce{H2O}) 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","支持的函数#支持的函数":"有关支持的函数列表，请参阅 KaTeX 支持的函数。","示例#示例":"Markdown 内容中支持内联和独立段落的 LaTeX 数学表达式。\n内联 page.md这个 \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) 是内联的。 这个 (\\sigma(z) = \\frac{1}{1 + e^{-z}}) 是内联的。\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$\nImportant\n请在 Hugo 配置文件中启用并配置 passthrough 扩展。它保留分隔符内的原始内容，以避免复杂表达式的渲染问题。\nhugo.yamlmarkup: goldmark: extensions: passthrough: delimiters: block: [['\\[', '\\]'], ['$$', '$$']] inline: [['\\(', '\\)']] enable: true 例如，使用对齐环境：\npage.md$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$ 将渲染为：\n$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$"},"title":"数学公式"},"/hextra-docs/guide/markdown/":{"data":{"":"Hugo 支持使用 Markdown 语法来格式化文本、创建列表等。本页将展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 样式 语法 示例 输出 粗体 **粗体文本** **粗体文本** 粗体文本 斜体 *斜体文本* *斜体文本* 斜体文本 删除线 ~~删除线文本~~ ~~删除线文本~~ 删除线文本 下标 \u003csub\u003e\u003c/sub\u003e 这是一个\u003csub\u003e下标\u003c/sub\u003e文本 这是一个下标文本 上标 \u003csup\u003e\u003c/sup\u003e 这是一个\u003csup\u003e上标\u003c/sup\u003e文本 这是一个上标文本 引用块 带出处的引用块\n不要通过共享内存来通信，而要通过通信来共享内存。\n— Rob Pike1\nMarkdown\u003e 不要通过共享内存来通信，而要通过通信来共享内存。\u003cbr\u003e \u003e — \u003ccite\u003eRob Pike[^1]\u003c/cite\u003e [^1]: 以上引用摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 上的[演讲](https://www.youtube.com/watch?v=PAAkCSZUG1c)。 提示框 -{-{-\u003c new-feature version=“v0.9.0” \u003e}}\n提示框是基于引用块语法的 Markdown 扩展，可用于强调关键信息。 支持 GitHub 风格的提示框。 请确保您使用的是最新版本的 Hextra 和 Hugo v0.134.0 或更高版本。\nNote\n用户应该知道的有用信息，即使是在浏览内容时。\nTip\n帮助用户更好地或更轻松地完成任务的建议。\nImportant\n用户需要了解的关键信息，以实现他们的目标。\nWarning\n需要用户立即注意的紧急信息，以避免问题。\nCaution\n关于某些操作的风险或负面结果的建议。\nMarkdown\u003e [!NOTE] \u003e 用户应该知道的有用信息，即使是在浏览内容时。 \u003e [!TIP] \u003e 帮助用户更好地或更轻松地完成任务的建议。 \u003e [!IMPORTANT] \u003e 用户需要了解的关键信息，以实现他们的目标。 \u003e [!WARNING] \u003e 需要用户立即注意的紧急信息，以避免问题。 \u003e [!CAUTION] \u003e 关于某些操作的风险或负面结果的建议。 表格 表格不是 Markdown 核心规范的一部分，但 Hugo 默认支持它们。\n姓名 年龄 Bob 27 Alice 23 Markdown| 姓名 | 年龄 | |--------|------| | Bob | 27 | | Alice | 23 | 表格中的内联 Markdown 斜体 粗体 代码 斜体 粗体 代码 Markdown| 斜体 | 粗体 | 代码 | | -------- | -------- | ------ | | *斜体* | **粗体** | `代码` | 代码块 语法高亮 列表 有序列表 第一项 第二项 第三项 Markdown1. 第一项 2. 第二项 3. 第三项 无序列表 列表项 另一个项 再一个项 Markdown* 列表项 * 另一个项 * 再一个项 嵌套列表 水果 苹果 橙子 香蕉 乳制品 牛奶 奶酪 Markdown* 水果 * 苹果 * 橙子 * 香蕉 * 乳制品 * 牛奶 * 奶酪 图片 Markdown![风景](https://picsum.photos/800/600) 带标题：\nUnsplash 风景 Markdown![风景](https://picsum.photos/800/600 \"Unsplash 风景\") 以上引用摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 上的演讲。 ↩︎","学习资源#学习资源":" Markdown 指南 Markdown 速查表 Markdown 教程 Markdown 参考 ","配置#配置":"Hugo 使用 Goldmark 进行 Markdown 解析。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 下进行配置。 以下是 Hextra 的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 更多配置选项，请参阅 Hugo 文档中的 配置 Markup。"},"title":"Markdown"},"/hextra-docs/guide/organize-files/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航会根据内容组织按字母顺序自动生成。要手动配置侧边栏顺序，可以在 Markdown 文件的前言中使用 weight 参数。\ncontent/docs/guide/_index.md--- title: 指南 weight: 2 --- ℹ️ 建议不要让侧边栏过深。如果你有很多内容，考虑将它们分成多个部分。 ","布局#布局":"Hextra 为不同类型的内容提供了三种布局：\n布局 目录 特性 docs content/docs/ 适合结构化文档，与本部分相同。 blog content/blog/ 用于博客文章，包含列表和详细文章视图。 default 其他所有目录 单页文章视图，无侧边栏。 要将某个部分自定义为与内置布局相同的行为，可以在该部分的 _index.md 的前言中指定所需的类型。\ncontent/my-docs/_index.md--- title: 我的文档 cascade: type: docs --- 上述示例配置确保 content/my-docs/ 中的内容文件默认会被视为文档（docs 类型）。","添加图片#添加图片":"添加图片的最简单方法是将图片文件放在与 Markdown 文件相同的目录中。 例如，将图片文件 image.png 与 my-page.md 文件放在一起：\ncontent docs my-page.md image.png 然后，我们可以使用以下 Markdown 语法将图片添加到内容中：\ncontent/docs/my-page.md![](image.png) 我们还可以利用 Hugo 的 页面包 功能将图片文件与 Markdown 文件一起组织。为此，将 my-page.md 文件转换为目录 my-page，并将内容放入名为 index.md 的文件中，然后将图片文件放入 my-page 目录中：\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) 或者，我们也可以将图片文件放在 static 目录中，这样所有页面都可以访问这些图片：\nstatic images image.png content docs my-page.md 注意，图片路径以斜杠 / 开头，并且相对于静态目录：\ncontent/docs/my-page.md![](/images/image.png) ","目录结构#目录结构":"默认情况下，Hugo 会在 content 目录中查找 Markdown 文件，目录的结构决定了网站最终的输出结构。 以本网站为例：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 每个 _index.md 文件都是对应部分的索引页面。其他 Markdown 文件则是常规页面。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","配置内容目录#配置内容目录":"默认情况下，Hugo 使用根目录 content/ 来构建网站。 如果你需要使用不同的目录来存放内容，例如 docs/，可以通过在站点配置文件 hugo.yaml 中设置 contentDir 参数来实现。","面包屑导航#面包屑导航":"面包屑导航会根据 /content 的目录结构自动生成。\n例如，考虑上面展示的目录结构。根据该结构，页面 /docs/guide/organize-files/ 顶部的面包屑导航会自动显示如下：\n文档 \u003e 指南 \u003e 组织文件 自定义面包屑链接标题 默认情况下，每个面包屑链接是根据页面的 title 参数生成的。你可以通过指定 linkTitle 来自定义。\n例如，如果我们希望面包屑显示为 Foo Bar 而不是 Organize Files：\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: 组织文件 --- 现在会生成以下面包屑：\n文档 \u003e 指南 \u003e Foo Bar 隐藏面包屑 你可以通过在页面的前言中指定 breadcrumbs: false 来完全隐藏面包屑：\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: 组织文件 --- "},"title":"组织文件"},"/hextra-docs/guide/syntax-highlighting/":{"data":{"":"Hugo 使用 Chroma，这是一个用纯 Go 编写的通用语法高亮器，用于语法高亮。 建议在 Markdown 内容中使用反引号来标记代码块。例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将会渲染为：\ndef say_hello(): print(\"Hello!\") ","功能#功能":"文件名 要为代码块添加文件名或标题，请设置 filename 属性：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 文件链接 -{-{-\u003c new-feature version=“v0.9.2” \u003e}}\n你可以使用 base_url 属性提供一个基础 URL，它将与文件名结合生成一个链接。\n如果文件名指定了文件在基础路径中的位置，则可以包含相对路径。\nMarkdown```go {base_url=\"https://github.com/imfing/hextra/blob/main/\",filename=\"exampleSite/hugo.work\"} go 1.20 ``` exampleSite/hugo.workgo 1.20 行号 要设置行号，请将 linenos 属性设置为 table，并可选地设置 linenostart 为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 要高亮特定行，请将 hl_lines 属性设置为行号列表：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块启用了复制按钮。可以通过修改站点配置文件来更改其行为：\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover ","支持的语言#支持的语言":"有关支持的语言列表，请参阅 Chroma 文档。"},"title":"语法高亮"},"/linux-docs/docker/docker_load/":{"data":{"":"","修改docker-load-的镜像名称为指定的名称#修改docker load 的镜像名称为指定的名称":" DOCKER_IMAGES_NAME=\"jre-alpine:17.0.10\" docker rm -f nps-agnet || echo \"docker rm nps-agent error\" a=$(docker load \u003c x86_jre_alpine_17.0.10.tar) DOCKER_IMAGES_NAME_BAK=$(echo $a | awk '{print $NF}') if [ \"${DOCKER_IMAGES_NAME}\" != \"${DOCKER_IMAGES_NAME_BAK}\" ];then docker tag ${DOCKER_IMAGES_NAME_BAK} ${DOCKER_IMAGES_NAME} fi "},"title":"Docker_load"},"/linux-docs/docker/docker_log/":{"data":{"":"","删除现有-docker-log#删除现有 docker log":" # 找到日志文件目录 cd /var/lib/docker/containers/*/json.log # 清空文件内容 cat /dev/null \u003e json.log ","限制docker-log#限制docker log":"全局限制 修改/etc/docker/daemon.json文件，添加如下内容：\n{ \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"50m\", \"max-file\": \"1\" } } 参数说明：\nlog-opts max-size 容器日志文件上限大小 log-opts max-file 窗口日志文件上限个数 重启docker容器\nsystemctl daemon-reload systemctl restart docker 单个容器限制 docker run --log-opt max-size=10m --log-opt max-file=3 docker-compose限制 nginx: image: nginx:1.12.1 restart: always logging: driver: \"json-file\" options: max-size: \"50m\" max-file: \"2\" "},"title":"Docker_log"},"/linux-docs/shell/shell_char/":{"data":{"":"shell","shell字符串比较#Shell字符串比较":" A=\"$1\" B=\"$2\" echo \"输入的原始值：A=$A,B=$B\" # 判断参数是否为空 if [ ! -n \"$2\" ]; then echo \"[-] Parameters of illegal !\" help exit 1 fi # 判断与0是否相等 pid_cnts=$(ps -ef | grep mysqld | grep -v grep | awk '{print $2}' | wc -l) if [ $pid_cnts -eq 0 ]; then echo \"process mysqld is exception,please check.\" else echo \"mysqld count = $pid_cnts.\" fi #判断字符串是否相等 if [ \"$A\" = \"$B\" ];then echo \"[ = ]\" fi #判断字符串是否相等，与上面的=等价 if [ \"$A\" == \"$B\" ];then echo \"[ == ]\" fi #注意: ==的功能在[[]]和[]中的行为是不同的，如下 #如果$a以”a”开头(模式匹配)那么将为true if [[ \"$A\" == a* ]];then echo \"[[ ==a* ]]\" fi #如果$a等于a*(字符匹配),那么结果为true if [ \"$A\" == \"a*\" ];then echo \"==/\"a*/\"\" fi #File globbing(通配) 和word splitting将会发生, 此时的a*会自动匹配到对应的当前以a开头的文件 #如在当前的目录中有个文件：add_crontab.sh,则下面会输出ok #if [ \"add_crontab.sh\" == a* ];then # echo \"ok\" #fi if [ \"$A\" == a* ];then echo \"[ ==a* ]\" fi #如果$a等于a*(字符匹配),那么结果为true if [ \"$A\" == \"a*\" ];then echo \"==/\"a*/\"\" fi #字符串不相等 if [ \"$A\" != \"$B\" ];then echo \"[ != ]\" fi #字符串不相等 if [[ \"$A\" != \"$B\" ]];then echo \"[[ != ]]\" fi #字符串不为空，长度不为0 if [ -n \"$A\" ];then echo \"[ -n ]\" fi #字符串为空.就是长度为0. if [ -z \"$A\" ];then echo \"[ -z ]\" fi #需要转义\u003c，否则认为是一个重定向符号 if [ $A /\u003c $B ];then echo \"[ \u003c ]\" fi if [[ $A \u003c $B ]];then echo \"[[ \u003c ]]\" fi #需要转义\u003e，否则认为是一个重定向符号 if [ $A /\u003e $B ];then echo \"[ \u003e ]\" fi if [[ $A \u003e $B ]];then echo \"[[ \u003e ]]\" fi "},"title":"Shell 字符串"}}